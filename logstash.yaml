apiVersion: logstash.k8s.elastic.co/v1alpha1
kind: Logstash
metadata:
  name: logstash
  namespace: performance
spec:
  version: 8.13.4
  count: 1
  config:
    log.level: info
    api.http.host: "0.0.0.0"
    queue.type: memory
  elasticsearchRefs:
    - clusterName: elasticsearch
      name: elasticsearch
  pipelines:
    - pipeline.id: main
      config.string: |
        input {
          beats {
            port => 5044
            host => "0.0.0.0"
          }
        }
        filter {
          # Metricbeat
          if [agent][type] == "metricbeat" {
            mutate { add_field => { "[@metadata][target_index]" => "metricbeat-metrics" } }
          }
          # JMeter CSV logs
          if "test_log_csv" in [type] {
            csv {
              separator => ","
              skip_header => "true"
              columns => ["timeStamp","elapsed","label","responseCode","responseMessage","threadName","dataType","success","failureMessage","bytes","sentBytes","grpThreads","allThreads","URL","Latency","IdleTime","Connect"]
            }
            mutate {
              convert => {
                "elapsed" => "integer"
                "responseCode" => "integer"
                "success" => "boolean"
                "bytes" => "integer"
                "sentBytes"=> "integer"
                "grpThreads"=> "integer"
                "allThreads"=> "integer"
                "Latency" => "integer"
                "IdleTime" => "integer"
                "Connect" => "integer"
              }
            }
            date {
              match => ["timeStamp", "UNIX_MS"]
              target => "@timestamp"
            }
          }
          # JMeter .log
          if "test_log_jmeter" in [type] {
            grok {
              match => { "message" => "%{TIMESTAMP_ISO8601:logtime} %{LOGLEVEL:level} %{GREEDYDATA:logmsg}" }
            }
            date {
              match => ["logtime", "ISO8601"]
              target => "@timestamp"
            }
          }
          # FastAPI logs (JSON format recommended)
          if "fastapp" in [type] {
            grok {
              match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} - %{LOGLEVEL:level} - %{GREEDYDATA:log_message}" }
            }
          }
        }
        output {
          # JMeter CSV
          if "test_log_csv" in [type] {
            elasticsearch {
              hosts => ["${ELASTICSEARCH_ES_HOSTS}"]
              user => "${ELASTICSEARCH_ES_USER}"
              password => "${ELASTICSEARCH_ES_PASSWORD}"
              ssl_certificate_authorities => "${ELASTICSEARCH_ES_SSL_CERTIFICATE_AUTHORITY}"
              index => "jmeter-csv-%{+YYYY.MM.dd}"
            }
            stdout { codec => json }
          }
          # JMeter LOG
          if "test_log_jmeter" in [type] {
            elasticsearch {
              hosts => ["${ELASTICSEARCH_ES_HOSTS}"]
              user => "${ELASTICSEARCH_ES_USER}"
              password => "${ELASTICSEARCH_ES_PASSWORD}"
              ssl_certificate_authorities => "${ELASTICSEARCH_ES_SSL_CERTIFICATE_AUTHORITY}"
              index => "jmeter-log-%{+YYYY.MM.dd}"
            }
            stdout { codec => json }
          }
          # FastAPI
          if "fastapp" in [type] {
            elasticsearch {
              hosts => ["${ELASTICSEARCH_ES_HOSTS}"]
              user => "${ELASTICSEARCH_ES_USER}"
              password => "${ELASTICSEARCH_ES_PASSWORD}"
              ssl_certificate_authorities => "${ELASTICSEARCH_ES_SSL_CERTIFICATE_AUTHORITY}"
              index => "fastapp-%{+YYYY.MM.dd}"
            }
            stdout { codec => json }
          }
          # Metricbeat
          if [agent][type] == "metricbeat" {
            elasticsearch {
              hosts => ["${ELASTICSEARCH_ES_HOSTS}"]
              user => "${ELASTICSEARCH_ES_USER}"
              password => "${ELASTICSEARCH_ES_PASSWORD}"
              ssl_certificate_authorities => "${ELASTICSEARCH_ES_SSL_CERTIFICATE_AUTHORITY}"
              index => "%{[@metadata][target_index]}-%{+YYYY.MM.dd}"
            }
            stdout { codec => json }
          }
        }
  services:
    - name: beats
      service:
        spec:
          type: NodePort
          ports:
            - port: 5044
              name: "filebeat"
              protocol: TCP
              targetPort: 5044
